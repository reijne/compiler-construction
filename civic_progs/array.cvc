#include "civic.h"

export void printIntVec(int[n] vec) {
    for (int i = 0, n) {
        printInt(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}

export void printFloatVec(float[n] vec) {
    for (int i = 0, n) {
        printFloat(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}

export void printIntMat(int[n, m] vec) {
    for (int i = 0, n) {
        for (int j = 0, m) {
            printInt(vec[i, j]);
            printSpaces(1);
        }
    printNewlines(1);
    }
}

export void printFloatMat(float[n, m] vec) {
    for (int i = 0, n) {
        for (int j = 0, m) {
            printFloat(vec[i, j]);
            printSpaces(1);
        }
    printNewlines(1);
    }
}

export void scanIntVec(int[n] vec) {
    for (int i = 0, n) {
        vec[i] = scanInt();
    }
}

export void scanFloatVec(float[n] vec) {
    for (int i = 0, n) {
        vec[i] = scanFloat();
    }
}

export void scanIntMat( int[m,n] mat ) {
    for (int i = 0, n) {
        for (int j = 0, m) {
            mat[i, j] = scanInt();
        }
    }
}

export void scanFloatMat( float[m,n] mat ) {
    for (int i = 0, n) {
        for (int j = 0, m) {
            mat[i, j] = scanFloat();
        }
    }
}

export void matMul(float[m,n] a, float[o,p] b, float[q,l] c) {
    for (int i = 0, m) {
        for (int j = 0, p) {
            c[i , j] = 0.0;
            for (int k = 0, n) {
                c[i, j] = c[i, j] + a[i, k] * b[k, j];
            }
        }
    }
}