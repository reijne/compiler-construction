<!--
 This XML file is the "command center" of your compiler.
 Here, we define the structure of the abstract syntax tree as well as the 
 traversals to process it.
-->

<?xml-stylesheet href="ast.html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition version="0.9" >

<!--
  =========================================================================
-->

  <attributetypes>
    <type name="String" ctype="char*" init="NULL" copy="function" />
    <type name="Int" ctype="int" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="BinOp" ctype="binop" init="BO_unknown" copy="literal" />
    <type name="MonOp" ctype="monop" init="MO_unknown" copy="literal" />
    <type name="Link" ctype="node*" init="NULL" copy="lookup" />
    <type name="CompilerPhase" ctype="compiler_phase_t" init="PH_initial" copy="literal" />
  </attributetypes>

<!--
  =========================================================================
-->

  <phases>
    <!-- id is the short id of the traversal 
         name is a descriptive name
         default gives the default traversal mode
           user  a user defined function
           sons  TravSons
           none  TravNone
           error TravError
         include the include file needed for the traversal
    -->
    <general>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" />
      <traversal id="COPY" name="Copy Syntax Tree" default="user" include="copy_node.h" />
      <traversal id="FREE" name="Free Syntax Tree" default="user" include="free_node.h" />
      <traversal id="CHK" name="Check Syntax Tree" default="user" include="check.h" />

      <traversal id="RI" name="Rename identifiers" default="sons" include="rename_identifiers.h">
        <travuser>
          <node name="Var" />
          <node name="VarLet" />
        </travuser>
      </traversal>

      <traversal id="SI" name="Sum ins" default="sons" include="sum_ints.h">
        <travuser>
          <node name="Int" />
        </travuser>
      </traversal>

      <traversal id="OS" name="Optimise subtraction" default="sons" include="opt_sub.h">
        <travuser>
          <node name="BinOp" />
        </travuser>
      </traversal>

      <traversal id="CBO" name="Count binary operators" default="sons" include="count_binops.h">
        <travuser>
          <node name="BinOp" />
          <node name="Module" />
        </travuser>
      </traversal>

      <traversal id="CI" name="Count identifiers" default="sons" include="count_identifiers.h">
        <travuser>
          <node name="Var" />
          <node name="VarLet" />
          <node name="Module" />
        </travuser>
      </traversal>

    </general>
  </phases>

<!--
  =========================================================================
-->

  <nodesets>
    <nodeset name="Expr">
      <target>
        <node name="BinOp" />
        <node name="MonOp" />
        <node name="Var" />
        <node name="Num" />
        <node name="Float" />
        <node name="Bool" />
      </target>
    </nodeset>
    <nodeset name="Stmt">
      <target>
        <node name="Assign" />
        <node name="If"/>
        <node name="While"/>
        <node name="DoWhile"/>
        <node name="For"/>
        <node name="Return"/>
      </target>
    </nodeset>
    <nodeset name="Declaration">
      <target>
        <node name="FunDec" />
        <node name="FunDef" />
        <node name="GlobalDec" />
        <node name="GlobalDef" />
      </target>
    </nodeset>
    <nodeset name="Type">
      <target>
        <node name="Num" />
        <node name="Float" />
        <node name="Bool" />
      </target>
    </nodeset>
    <nodeset name="RetType">
      <target>
        <node name="Void" />
        <node name="Num" />
        <node name="Float" />
        <node name="Bool" />
      </target>
    </nodeset>
  </nodesets>

<!--
  =========================================================================
-->

  <syntaxtree>
<!--
  Node Program:
-->
    <node name="Program">
    <description>Entire Program, root node of AST</description>
    <sons>
      <son name="Declarations">
      <description>One or many declarations</description>
        <targets>
          <target mandatory="yes">
            <node name="Declarations" />
              <phases>
                <all />
              </phases>
            </target>
        </targets>
      </son>
    </sons>
    <attributes>
    </attributes>
  </node>
<!--
 Node Declarations:
-->
    <node name="Declarations">
      <description>represents (sequence of) declaration(s)</description>
      <sons>
        <son name="Declaration">
        <description>Mandetory declaration</description>
          <targets>
            <target mandatory="yes">
              <set name="Declaration" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Declarations">
        <description>remaining optional declaration(s)</description>
          <targets>
            <target mandatory="no">
              <node name="Declarations" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
  Node Module:
-->
    <node name="Module">
      <description>Topmost node which holds an integer value</description>
      <sons>
        <son name="Stmts">
        <description>Child of the topmost node</description>
          <targets>
            <target mandatory="yes">
              <node name="Stmts" />
                <phases>
                  <all />
                </phases>
              </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Count_all">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count_add">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count_sub">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count_mul">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count_div">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count_mod">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                  <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node FunDec:
-->
    <node name="FunDec">
      <description>Declaration of a function</description>
      <sons>
        <son name="Keyword">
        <description>extern keyword</description>
          <targets>
            <target mandatory="yes">
              <node name="Extern" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="FunHeader">
        <description>Header of a function</description>
          <targets>
            <target mandatory="yes">
              <node name="FunHeader" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Semicolon">
        <description>Semicolon</description>
          <targets>
            <target mandatory="yes">
              <node name="Semicolon" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Extern:
-->
   <node name="Extern">
      <description>represents the extern keyword</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Semicolon:
-->
   <node name="Semicolon">
      <description>represents the semicolon</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node FunDef:
-->
    <node name="FunDef">
      <description>Declaration of a function</description>
      <sons>
        <son name="Keyword">
        <description>export keyword</description>
          <targets>
            <target mandatory="no">
              <node name="Export" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="FunHeader">
        <description>Header of a function</description>
          <targets>
            <target mandatory="yes">
              <node name="FunHeader" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="FunBodyBlock">
        <description>Body of a function with brackets</description>
          <targets>
            <target mandatory="yes">
              <node name="FunBodyBlock" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node FunBodyBlock:
-->
    <node name="FunBodyBlock">
      <description>Function body with curly brackets</description>
      <sons>
        <son name="L_curly_bracket">
        <description>Left curly bracket</description>
          <targets>
            <target mandatory="no">
              <node name="L_curly_bracket" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="FunBody">
        <description>Body of a function</description>
          <targets>
            <target mandatory="no">
              <node name="FunBody" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="R_curly_bracket">
        <description>Left curly bracket</description>
          <targets>
            <target mandatory="no">
              <node name="R_curly_bracket" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node L_curly_bracket:
-->
   <node name="L_curly_bracket">
      <description>represents the left curly bracket</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node R_curly_bracket:
-->
   <node name="R_curly_bracket">
      <description>represents the right curly bracket</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node L_bracket:
-->
   <node name="L_bracket">
      <description>represents the left bracket</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node R_bracket:
-->
   <node name="R_bracket">
      <description>represents the right bracket</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Comma:
-->
   <node name="Comma">
      <description>represents the comma</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node FunHeader:
-->
    <node name="FunHeader">
      <description>Header of a function</description>
      <sons>
        <son name="RetType">
        <description>Type a function returns</description>
          <targets>
            <target mandatory="yes">
              <set name="RetType" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description>Name of a function</description>
          <targets>
            <target mandatory="yes">
              <node name="FunHeader" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="L_bracket">
        <description>Left round bracket</description>
          <targets>
            <target mandatory="yes">
              <node name="Export" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Params">
        <description>Left round bracket</description>
          <targets>
            <target mandatory="no">
              <node name="Params" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="R_bracket">
        <description>Right round bracket</description>
          <targets>
            <target mandatory="yes">
              <node name="Export" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Params:
-->
    <node name="Params">
      <description>represents (sequence of) parameters</description>
      <sons>
        <son name="Param">
        <description>First parameter (in sequence)</description>
          <targets>
            <target mandatory="yes">
              <node name="Param" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Comma">
        <description>Comma seperator</description>
          <targets>
            <target mandatory="no">
              <node name="Comma" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Params">
        <description>remaining parameters in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Params" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Param:
-->
    <node name="Param">
      <description>Represents a parameter</description>
      <sons>
        <son name="RetType">
        <description>Type a function returns</description>
          <targets>
            <target mandatory="yes">
              <set name="RetType" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description>Type a function returns</description>
          <targets>
            <target mandatory="yes">
              <set name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Id:
-->
    <node name="Id">
      <description>Represents an Id</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Id">
        <description>Identifier of parameter</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node GlobalDec:
-->
    <node name="GlobalDec">
      <description>Global declaration of identifier</description>
      <sons>
        <son name="Extern">
        <description>Extern keyword</description>
          <targets>
            <target mandatory="yes">
              <node name="Extern" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Type">
        <description>Type of identifier</description>
          <targets>
            <target mandatory="yes">
              <set name="Type" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description>Name of identifier</description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Semicolon">
        <description>Semicolon</description>
          <targets>
            <target mandatory="yes">
              <node name="Semicolon" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node GlobalDef:
-->
    <node name="GlobalDef">
      <description>Global definition of identifier</description>
      <sons>
        <son name="Export">
        <description>Export keyword</description>
          <targets>
            <target mandatory="no">
              <node name="Export" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Type">
        <description>Type of identifier</description>
          <targets>
            <target mandatory="yes">
              <set name="Type" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description>Name of identifier</description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Expr">
        <description>Identifier expression</description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Semicolon">
        <description>Semicolon</description>
          <targets>
            <target mandatory="yes">
              <node name="Semicolon" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Stmts:
-->
    <node name="Stmts">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="Stmt">
        <description>first statement in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Stmt" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining statements in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Stmts" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Assign:
-->
    <node name="Assign">
      <description>represents assignment statement</description>
      <sons>
        <son name="Let">
        <description>
         left hand side variable; can be missing to represent procedure calls
	      </description>
          <targets>
            <target mandatory="no">
              <node name="VarLet" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Expr">
        <description>right hand side expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node BinOp:
-->
    <node name="BinOp">
      <description>represents binary operator application</description>
      <sons>
        <son name="Left">
        <description>left operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Right">
        <description>right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="BinOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node MonOp:
-->
    <node name="MonOp">
      <description>represents mono operator application</description>
      <sons>
        <son name="Right">
        <description>right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="MonOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node VarLet:
-->
    <node name="VarLet">
      <description>represents variable (identifier) in assignment position</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
        <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
        <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Var:
-->
    <node name="Var">
      <description>represents variable (identifier) in expression position</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
        <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
        <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
 	      </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Num:
-->
   <node name="Num">
      <description>represents integer constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
             </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Float:
-->
    <node name="Float">
      <description>represents floating point constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Float">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Bool:
-->
    <node name="Bool">
      <description>represents Boolean constant (true/false)</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node SymbolTableEntry:
-->
    <node name="SymbolTableEntry">
      <description>represents symbol table entry</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Error:
-->
    <node name="Error">
      <description>represents internal Error representation constructor</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Error" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="anyphase">
          <type name="CompilerPhase">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>

  </syntaxtree>

</definition>
  
